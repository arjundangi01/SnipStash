"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import {
  Code,
  FolderPlus,
  LayoutDashboard,
  Tag,
  ChevronDown,
  Hash,
  X,
} from "lucide-react";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/src/components/ui/collapsible";
import { ScrollArea } from "@/src/components/ui/scroll-area";
import { Button } from "@/src/components/ui/button";
import { cn } from "@/src/lib/utils";
import { Badge } from "@/src/components/ui/badge";

interface Tag {
  id: string;
  name: string;
  count: number;
  isAutoGenerated: boolean;
}

interface Language {
  name: string;
  count: number;
}

export function Sidebar() {
  const pathname = usePathname();
  const router = useRouter();
  const [tagsOpen, setTagsOpen] = useState(true);
  const [langsOpen, setLangsOpen] = useState(true);
  const [tags, setTags] = useState<Tag[]>([]);
  const [languages, setLanguages] = useState<Language[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function fetchData() {
      try {
        const [tagsRes, langsRes] = await Promise.all([
          fetch("/api/tags"),
          fetch("/api/languages"),
        ]);

        if (tagsRes.ok && langsRes.ok) {
          const tagsData = await tagsRes.json();
          const langsData = await langsRes.json();

          setTags(tagsData);
          setLanguages(langsData);
        }
      } catch (error) {
      } finally {
        setIsLoading(false);
      }
    }

    fetchData();
  }, []);

  const filterByTag = (tag: string) => {
    router.push(`/dashboard?tag=${tag}`);
  };

  const filterByLanguage = (language: string) => {
    router.push(`/dashboard?language=${language}`);
  };

  const clearFilter = () => {
    router.push("/dashboard");
  };

  const sidebarLinks = [
    {
      href: "/dashboard",
      icon: LayoutDashboard,
      label: "Dashboard",
    },
    {
      href: "/snippets/new",
      icon: FolderPlus,
      label: "Add Snippet",
    },
  ];

  return (
    <aside className="hidden md:flex md:w-64 flex-col border-r h-full bg-background/60">
      <ScrollArea className="flex-1 py-6">
        <nav className="grid gap-2 px-4">
          {sidebarLinks.map((link) => (
            <Link
              key={link.href}
              href={link.href}
              className={cn(
                "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground transition-colors",
                pathname === link.href
                  ? "bg-accent text-accent-foreground"
                  : "text-muted-foreground"
              )}
            >
              <link.icon className="h-4 w-4" />
              {link.label}
            </Link>
          ))}
        </nav>

        {/* Clear filters button */}
        {(pathname.includes("?tag=") || pathname.includes("?language=")) && (
          <div className="mt-4 px-4">
            <Button
              variant="outline"
              size="sm"
              className="w-full flex items-center gap-2"
              onClick={clearFilter}
            >
              <X className="h-4 w-4" />
              Clear filters
            </Button>
          </div>
        )}
      </ScrollArea>
    </aside>
  );
}
